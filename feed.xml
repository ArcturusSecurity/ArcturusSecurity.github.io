<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml"/><link href="/" rel="alternate" type="text/html"/><updated>2020-06-10T12:40:46+01:00</updated><id>/feed.xml</id><title type="html">Arcturus Labs</title><subtitle/><author><name>Arcturian</name><email>hello@arcturus.net</email></author><entry><title type="html">You, me and Use-After-Free</title><link href="/post/You-me-and-UAF" rel="alternate" type="text/html" title="You, me and Use-After-Free"/><published>2020-06-10T00:00:00+01:00</published><updated>2020-06-10T00:00:00+01:00</updated><id>/post/You-me-and-UAF</id><content type="html" xml:base="/post/You-me-and-UAF">&lt;h2 id="video-content-announcement">Video Content Announcement&lt;/h2>
&lt;p>Hello, interweblings! This post is to announce that we’re branching out into
BRAND NEW and EXCITING forms of content, such as VIDEOS and … well. Videos!&lt;/p>
&lt;p>We’ve got a brand new video on Use-After-Free bugs, along with some code &lt;a href="https://github.com/ArcturusSecurity/you-me-and-uaf">up
on GitHub&lt;/a> so you can load
it up in &lt;code class="highlighter-rouge">gdb&lt;/code> and play along. LiveOverflow eat your heart out.&lt;/p>
&lt;p>So without futher ado, go and check out the video: &lt;a href="https://youtu.be/3akzDXMVW8k">You, me and Use-After-Free&lt;/a>! &lt;a href="https://youtu.be/3akzDXMVW8k">&lt;img src="/assets/img/you-me-uaf.jpg" alt="you, me and use-after-free" />&lt;/a>&lt;/p>
&lt;p>You’ll learn all sorts of fun things, like:&lt;/p>
&lt;ul>
&lt;li>what UAF means&lt;/li>
&lt;li>how Use-After-Free bugs work&lt;/li>
&lt;li>reasons for the concept of time&lt;/li>
&lt;li>an outline of how to exploit UAF bugs&lt;/li>
&lt;li>why nobody talks to you.&lt;/li>
&lt;/ul>
&lt;p>Have fun! If you enjoy this style of content, please &lt;a href="mailto:hello@arcturus.net">reach out&lt;/a>
and say hello. We won’t spam you, promis. Oh, we also now have an RSS feed.&lt;/p></content><author><name>Rory M</name></author><summary type="html">Video Content Announcement Hello, interweblings! This post is to announce that we’re branching out into BRAND NEW and EXCITING forms of content, such as VIDEOS and … well. Videos!</summary></entry><entry><title type="html">HTTP Strict-Transport-Security and You</title><link href="/post/HSTS-and-You" rel="alternate" type="text/html" title="HTTP Strict-Transport-Security and You"/><published>2020-05-19T00:00:00+01:00</published><updated>2020-05-19T00:00:00+01:00</updated><id>/post/HSTS-and-You</id><content type="html" xml:base="/post/HSTS-and-You">&lt;h2 id="secure-connections-how-do-they-work">Secure Connections. How Do They Work?&lt;/h2>
&lt;p>Modern browsers play a big part in web application security. They are responsible for establishing a secure connection with the web application, managing and verifying SSL certificates, warning users of potential security issues and securely storing session tokens. This represents a large attack surface, wherein many things can go wrong. This is one of the reasons why most browsers run in a security sandbox, which can help limit the impact of security vulnerabilities. But that’s another article.&lt;/p>
&lt;p>One downside to these security controls is that many of them must be manually set by an application (or web server). Some via HTTP response headers, others via specific Cookie flags. Unfortunately, this means that many developers who aren’t security-conscious simply don’t know about them. Not knowing about the controls means they won’t implement them, leaving their users unprotected. This is &lt;em>Bad™&lt;/em>.&lt;/p>
&lt;p>In this article we’ll take a brief look at two specific security controls and how they work together. In case you hadn’t guessed, we will be looking at the &lt;code class="highlighter-rouge">Strict-Transport-Security&lt;/code> HTTP header and the &lt;code class="highlighter-rouge">Secure&lt;/code> Cookie flag.&lt;/p>
&lt;h2 id="strict-transport-security">Strict-Transport-Security&lt;/h2>
&lt;p>The HTTP Strict-Transport-Security response header (HSTS) is an HTTP response header which tells the user’s browser to perform all subsequent requests to a site using HTTPS instead of HTTP. This means that the browser will not send any data to an unsecured version of the site, until the &lt;code class="highlighter-rouge">Strict-Transport-Security&lt;/code> header expires.&lt;/p>
&lt;h2 id="secure-cookie-flag">Secure Cookie Flag&lt;/h2>
&lt;p>The Secure flag is an option which can be set on cookies when they are issued by a website. This flag ensures that the cookie in question is only ever sent when it has been encrypted, such as when using HTTPS.&lt;/p>
&lt;p>Do you see where we’re going yet?&lt;/p>
&lt;h2 id="holy-union">Holy Union&lt;/h2>
&lt;p>Now. Lacking either one of these security controls individually isn’t &lt;em>TOO&lt;/em> serious of an issue. However, if neither of them are set, then problems can arise.&lt;/p>
&lt;p>On an unsecured or shared connection (&lt;em>such as a coffee shop, London Underground WiFi, etc&lt;/em>) bad guys who can intercept network traffic may be able to capture information exposed in the first unencrypted request to an HTTP URL.&lt;/p>
&lt;p>When you type in onlyfans.com, your browser will send an HTTP request to ‘onlyfans.com’ – which will then &lt;em>redirect&lt;/em> you to ‘https://onlyfans.com’. In this first request, you can leak sensitive data on an unencrypted connection. Without either of the above security controls implemented, a hacker can abuse this to steal session cookies and hijack your account.&lt;/p>
&lt;h2 id="story-time">Story Time&lt;/h2>
&lt;p>Scenario! A user is at home, browsing the internet. On their &lt;strong>&lt;em>phone&lt;/em>&lt;/strong>, the absolute animal. Anyway. Dear user decides to visit the Next website, to buy some wavy garms. They register to the website and fill out their details; full name, mothers’ maiden name, address, favourite colour, postcode – the works.&lt;/p>
&lt;p>&lt;em>Note: www.next.co.uk is an arbitrary URL that we picked from a hat. No hard feelings. Don’t sue us.&lt;/em>&lt;/p>
&lt;p>Hmm! Does this site have any security in place? Our user is indifferent, but us hackers are a curious lot. Let’s look at the HTTP response we get after logging in (trimmed for brevity):&lt;/p>
&lt;div class="language-http highlighter-rouge">&lt;div class="highlight">&lt;pre class="highlight">&lt;code>&lt;span class="k">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">1.1&lt;/span> &lt;span class="m">302&lt;/span> &lt;span class="ne">Moved Temporarily&lt;/span>
&lt;span class="na">Content-Type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">text/html; charset=utf-8&lt;/span>
&lt;span class="na">Location&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">https://www.next.co.uk/secure/account/myaccount&lt;/span>
&lt;span class="na">Content-Security-Policy&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">frame-ancestors 'self' iguidewebapp.next-uk.next.loc/ end-duws02.next-uk.next.loc/ end-dpws02.next-uk.next.loc/ studio.mgmt.qa.test/ studio.mgmt.next-uk.next.loc/&lt;/span>
&lt;span class="na">Set-Cookie&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">Next-AP=accountEmail=[..]&amp;amp;Version=[..]; expires=Tue, 08-Apr-2070 09:27:02 GMT; path=/; HttpOnly&lt;/span>
&lt;span class="na">Set-Cookie&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">NextSaleAuth=AccountNo=[..]&amp;amp;Version=[..]&amp;amp;AuthToken=[..]&amp;amp;Timestamp=[..]&amp;amp;SourceSite=Main&amp;amp;ReadVIPSalePopUpModal=False; path=/; HttpOnly&lt;/span>
&lt;span class="na">Set-Cookie&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">bm_sv=[..]; Domain=.next.co.uk; Path=/; Max-Age=4523; HttpOnly&lt;/span>
&lt;span class="s">[..]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;p>Now, there are couple things to point out about this response:&lt;/p>
&lt;ul>
&lt;li>three cookies have been set by the application; “Next-AP”, “NextSaleAuth”, and “bm_sv”&lt;/li>
&lt;li>they’ve implemented the &lt;code class="highlighter-rouge">HttpOnly&lt;/code> control on all cookies&lt;/li>
&lt;li>they’re using a &lt;code class="highlighter-rouge">Content-Security-Policy&lt;/code> header. Good stuff!&lt;/li>
&lt;/ul>
&lt;p>However:&lt;/p>
&lt;ul>
&lt;li>the &lt;code class="highlighter-rouge">Strict-Transport-Security&lt;/code> header is missing&lt;/li>
&lt;li>the &lt;code class="highlighter-rouge">Secure&lt;/code> flag has not been set on any of the cookies.&lt;/li>
&lt;/ul>
&lt;p>Back to the story. Let’s say our user visits their local coffee shop. They order a super soy express macchiato, to drink in. Because, well..:
&lt;a href="/assets/img/supersoy.png">&lt;img src="/assets/img/supersoy.png" alt="yeah, that's definitely what he ordered" title="yeah, that's definitely what he ordered" />&lt;/a>&lt;/p>
&lt;p>While at the coffee shop, our user connects to the free WiFi and decides to continue their shopping. The user enters www.next.co.uk into their browser.&lt;/p>
&lt;p>&lt;strong style="text-align;text-align:center;width:100%;display:block;">- SUDDEN CUT TO BLACK -&lt;/strong>&lt;/p>
&lt;h2 id="the-issue">The Issue&lt;/h2>
&lt;p>Here is the problem. If the user types the address into their browsers’ address bar as above, their browser will send the first request to the site over HTTP instead of HTTPS. (&lt;em>yes, there are exceptions, stop interrupting&lt;/em>.)&lt;/p>
&lt;p>This request will include all the login cookies that the user has stored.&lt;/p>
&lt;p>Ahem. &lt;strong>&lt;em>This request will include all the login cookies that the user has stored.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>As the &lt;code class="highlighter-rouge">Strict-Transport-Security&lt;/code> header hasn’t been set for the site, the browser will allow the request to be made over HTTP. In addition, as the site didn’t set the &lt;code class="highlighter-rouge">Secure&lt;/code> flag on cookies, those login cookies will be sent over the unsecured connection.&lt;/p>
&lt;p>Unbeknownst to the user, a hacker is sitting in a dark corner of the coffeeshop with his hoody on. Our hacker is connected to the same WiFi. He is intercepting all network traffic and looking at the data scroll by in big green letters, matrix-style.&lt;/p>
&lt;p>When our poor user attempts to load www.next.co.uk on his phone, the phone sends a request to www.next.co.uk over HTTP. That request is captured by the hacker. Because that request is not sent over a secure channel (HTTPS), the hacker can easily read the contents of the request – including session information.&lt;/p>
&lt;p>The following screenshot shows the full request captured by our friendly neighbourhood hacker (using tcpdump):
&lt;a href="/assets/img/tcpdump_hsts.png">&lt;img src="/assets/img/tcpdump_hsts.png" alt="tcpdump output" title="tcpdump output" />&lt;/a>&lt;/p>
&lt;p>The hacker can now use this session information and authenticate to the application, impersonating the victim and gaining access to their private information.&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>So, what is one to do? Some may argue that a user attempting to connect to their site over an unsecured connection is “&lt;em>not my problem&lt;/em>”. This is missing the point. Existing protections are available and easy to implement.&lt;/p>
&lt;p>&lt;a href="https://letsencrypt.org/">Let’s Encrypt&lt;/a>, a service which lets you generate SSL certificates for your websites, is &lt;em>FREE&lt;/em>. And that’s a great price! Also, users don’t care if they’re at fault for a security breach, they will want &lt;em>you&lt;/em> to fix it. It’s prudent to implement strong security controls to protect your brand’s reputation.&lt;/p>
&lt;p>Web application security is a vast and complicated topic. Each aspect of application security is as important as the others. Use the tools you have available! On that note, there are other security flags you can apply to cookies – expect an article on the &lt;code class="highlighter-rouge">SameSite&lt;/code> cookie flag soon.&lt;/p>
&lt;p>For further reading, consult the amazing Mozilla Developer Network for information about how to correctly implement &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security">HSTS&lt;/a> and the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies">Secure&lt;/a> cookie flag.&lt;/p></content><author><name>Luke R</name></author><summary type="html">Secure Connections. How Do They Work? Modern browsers play a big part in web application security. They are responsible for establishing a secure connection with the web application, managing and verifying SSL certificates, warning users of potential security issues and securely storing session tokens. This represents a large attack surface, wherein many things can go wrong. This is one of the reasons why most browsers run in a security sandbox, which can help limit the impact of security vulnerabilities. But that’s another article.</summary></entry><entry><title type="html">WordPress DoS: Rediscovering an Unpatched 0-Day</title><link href="/post/WordPress-DoS" rel="alternate" type="text/html" title="WordPress DoS: Rediscovering an Unpatched 0-Day"/><published>2019-12-20T00:00:00+00:00</published><updated>2019-12-20T00:00:00+00:00</updated><id>/post/WordPress-DoS</id><content type="html" xml:base="/post/WordPress-DoS">&lt;h2 id="background">Background&lt;/h2>
&lt;p>As how all the most… &lt;em>inspired&lt;/em> storytelling begins, I was at work. I was working on a pretty routine website test for a client; a fascinatingly average WordPress setup.&lt;/p>
&lt;p>During my perusal of the site I noticed that &lt;a href="https://github.com/wpscanteam/wpscan">wpscan&lt;/a> can bruteforce WordPress logins using the &lt;a href="https://codex.wordpress.org/XML-RPC_WordPress_API">XMLRPC API&lt;/a>. Trying it, I piped the requests through Burp (&lt;em>which I &lt;strong>definitely&lt;/strong> always remember to do for the audit trail haha&lt;/em> 👀) and found out that it performs just one auth attempt per API call. After some light digging through the XMLRPC documentation, I discovered &lt;code class="highlighter-rouge">system.multicall&lt;/code>.&lt;/p>
&lt;p>Oho! Anything starting with “system” sounds naughty. I had a &lt;em>eureka!&lt;/em> moment when I figured I could multicall the method wpscan uses to brute-force logins, which would let me bruteforce much faster..!&lt;/p>
&lt;p>After spending a good hour developing a working proof-of-concept I &lt;em>then&lt;/em> discovered that said multicall login bruteforce issue had been &lt;a href="https://core.trac.wordpress.org/ticket/34336">discovered and patched&lt;/a> a long time ago. Great minds and all that. Anyway, this &lt;code class="highlighter-rouge">system.multicall&lt;/code> method… the potential to run any API callback thousands of times, from a single request? Who came up with this? It’s BEGGING for abuse.&lt;/p>
&lt;p>I moved on to investigating other available API callbacks. One such contender, ripe for some multicall abuse, is our friend &lt;code class="highlighter-rouge">pingback.ping&lt;/code>. An awful “feature” (&lt;em>opinionated? me?&lt;/em>) that allows blogs to tell each other when… uh… users post on them? I don’t even know.
&lt;a href="/assets/img/wpdos_who_cares_about_pingbacks.png">&lt;img src="/assets/img/wpdos_who_cares_about_pingbacks.png" alt="who cares about pingbacks" />&lt;/a> Who cares? Point is that you can call this API unauthenticated and &lt;em>&lt;strong>that’s what matters&lt;/strong>&lt;/em>.&lt;/p>
&lt;p>Calling this pingback API causes the server to send an HTTP request to a server of your choice. So, what happens if we use &lt;code class="highlighter-rouge">system.multicall&lt;/code> to batch 4000 pingbacks into a single request, then send it about 200 times..?&lt;/p>
&lt;p>&lt;a href="/assets/img/wpdos_dead_nginx.png">&lt;img src="/assets/img/wpdos_dead_nginx.png" alt="bad things" title="Bad things" />&lt;/a> Bad things.&lt;/p>
&lt;h2 id="root-cause">Root Cause&lt;/h2>
&lt;p>This is the &lt;em>BIG BRAIN&lt;/em> section. If you just wanna go and DoS some scrubs, the &lt;a href="https://youtu.be/dQw4w9WgXcQ">code is here&lt;/a>.&lt;/p>
&lt;p>So. Root cause. What’s happening is that on receiving a request containing a load of pingback requests, WordPress actually issues EVERY SINGLE ONE, the ABSOLUTE madlad. As you can imagine, this takes a rather long time. Suppose (generously) that a server can complete a full request in 1 second, issuing 2000 pingbacks will use up half an hour of server resources.&lt;/p>
&lt;p>Now isn’t this what PHP’s &lt;code class="highlighter-rouge">max_execution_time&lt;/code> directive is for, you ask? Well, yes! A configuration directive with the &lt;em>sole purpose&lt;/em> of preventing long-running scripts consuming too many resources! &lt;a href="https://www.php.net/manual/en/function.set-time-limit.php#refsect1-function.set-time-limit-notes">Or so you’d think&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>time spent on activity that happens outside the execution of the script [..] is not included when determining the maximum time that the script has been running.&lt;/p>
&lt;/blockquote>
&lt;p>On *nix, PHP doesn’t take into account time spent doing non-PHP things… such as cURL requests. &lt;em>bruh.&lt;/em> why even have the directive in the first place lmao.&lt;/p>
&lt;p>Each request WordPress issues has a 10 second timeout and we can queue a BUNCH of them into a single API call. After we issue about 200 such batched calls the server will be too busy repeatedly using up socket descriptors to do anything else.&lt;/p>
&lt;h2 id="oh-god-how-do-i-fix-it">OH GOD HOW DO I FIX IT?&lt;/h2>
&lt;p>WordPress have a troubling history of &lt;a href="https://core.trac.wordpress.org/ticket/35532">Not&lt;/a> &lt;a href="https://core.trac.wordpress.org/ticket/47551">Giving&lt;/a> a &lt;a href="https://core.trac.wordpress.org/ticket/36806">Shit&lt;/a>™ about Denial-of-Service issues, so right on cue they rapidly WONTFIX’d this after we raised it with them:
&lt;a href="/assets/img/wpdos_dont_care.png">&lt;img src="/assets/img/wpdos_dont_care.png" alt="dont care" title="dont care" />&lt;/a> Loss of availability isn’t a “severe issue”, after all.&lt;/p>
&lt;p>I also tried to contact the PHP developers to argue that this is a language fault, but I got completely stonewalled.&lt;/p>
&lt;p>But worry not, dear netizen! Arcturus are here to help. The hands-down best solution is to &lt;s>uninstall WordPress&lt;/s> remove &lt;code class="highlighter-rouge">xmlrpc.php&lt;/code>. Failing that, go through &lt;em>every single post&lt;/em> on your site and disable pingbacks. Another option is to disable the &lt;code class="highlighter-rouge">system.multicall&lt;/code> method with &lt;a href="https://gist.github.com/roddux/7612285c3636260b1c156c40fe795f4e">this handy patch&lt;/a>. Y’all welcome ♥&lt;/p>
&lt;h2 id="pre-publish-update">Pre-publish Update&lt;/h2>
&lt;p>Begrudgingly, I realised that as a &lt;strong>PrOfeSSioNaL&lt;/strong>, I should try at least once more to report this responsibly to the community. I turned to the WordPress Bug Tracker (&lt;em>what a horrorshow&lt;/em>) and started regurgitating this article. Before submitting I, on a whim, made a search for ‘pingback multicall’. Turns out a similarly BIG BRAINed hacker found this exact issue! &lt;a href="https://core.trac.wordpress.org/ticket/47856">4 months ago&lt;/a>. Lo and behold, THEY CLOSED IT AS NON-APPLICABLE AHHAHAHAHAHAH.&lt;/p>
&lt;p>Despite this having been reported, this is still technically a zero-day because there’s no patch. A &lt;em>4-month old&lt;/em> zero-day..! So yeah, the official line would appear to be “screw you, you’re on your own”. Apply the patch above and get busy moving the hell away from the platform.&lt;/p>
&lt;p>On that happy note, proof of concept code is linked below. DON’T DO AN ILLEGAL, iF YoU dO iT’S NOt mY fAuLt. Merry Christmas!&lt;/p>
&lt;p>PoC: &lt;a href="https://github.com/roddux/wordpress-dos-poc">code here, no foolin&lt;/a>&lt;br />
Hours slept: 2&lt;br />
Reported: 19th November&lt;br />
Caffeine consumed: 1250mg&lt;br />
Fixed: ‘&lt;em>DoS reports are out of the program scope.&lt;/em>’ ¯\_(ツ)_/¯ &lt;br />&lt;/p></content><author><name>Rory M</name></author><summary type="html">Background As how all the most… inspired storytelling begins, I was at work. I was working on a pretty routine website test for a client; a fascinatingly average WordPress setup.</summary></entry><entry><title type="html">Concrete5 Reflected XSS</title><link href="/post/Concrete5-XSS" rel="alternate" type="text/html" title="Concrete5 Reflected XSS"/><published>2019-07-25T00:00:00+01:00</published><updated>2019-07-25T00:00:00+01:00</updated><id>/post/Concrete5-XSS</id><content type="html" xml:base="/post/Concrete5-XSS">&lt;p>It’s fun working in this industry. I get paid to break things, like every day. What more could you want?&lt;/p>
&lt;p>On a related note, I found myself on a test last week. The client was launching a website, wanted to make sure they weren’t missing anything hilariously obvious. Pretty standard stuff. We did happen to find them leaving a phpinfo file laying around, but that’s besides the point.&lt;/p>
&lt;p>I discovered they’re using a CMS called ‘&lt;a href="https://www.concrete5.org/">Concrete5&lt;/a>’. This was new to me; so, naturally, my ears pricked up. I discovered that it’s open source and actually in fairly wide use (&lt;i>if their website is to be believed..&lt;/i>): &lt;a href="/assets/img/concrete5_install_numbers.png">&lt;img src="/assets/img/concrete5_install_numbers.png" alt="suspicious numbers" title="Suspicious numbers..." />&lt;/a> I decided to dig in with some source code analysis.&lt;/p>
&lt;p>Reading through source code can sometimes be quite a pleasant experience. This application is written in PHP. This was not one of those times. Wrapping my head around how requests are routed took me longer than I care to admit, but my trusty sidekicks ripgrep and &lt;code class="highlighter-rouge">echo "&amp;lt;!-- HERE --&amp;gt;";&lt;/code> saved my bacon. &lt;a href="/assets/img/concrete5_ugh.png">&lt;img src="/assets/img/concrete5_ugh.png" alt="suspicious numbers" title="Friends don't let friends use PHP" />&lt;/a>&lt;/p>
&lt;p>So. I hacked together, printf-debugging style, some routing information. Got my head around how URLs pair up with Controllers and Views. I’ve not dug into Symfony much before and I hope never to again.&lt;/p>
&lt;p>After figuring out how to match a URL request to a specific View, I started grepping for some basic &lt;code class="highlighter-rouge">$_GET&lt;/code> stuff. It took me a good fifteen minutes to realise Symfony has it’s own wrappers for &lt;code class="highlighter-rouge">$_GET&lt;/code>, &lt;code class="highlighter-rouge">$_POST&lt;/code> and &lt;code class="highlighter-rouge">$_REQUEST&lt;/code>, because REASONS. After adjusting my regex, in &lt;a href="https://github.com/concrete5/concrete5/blob/3cb869cee58b1bfc4b53bb94f1560967c2ed5851/concrete/views/panels/page/preview_as/frame.php#L4">one of the views&lt;/a> I found this gem:&lt;/p>
&lt;div class="language-php highlighter-rouge">&lt;div class="highlight">&lt;pre class="highlight">&lt;code>[..]
src="&lt;span class="cp">&amp;lt;?=&lt;/span> &lt;span class="nx">URL&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">'/ccm/system/panels/page/preview_as_user/render'&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s1">'?&amp;amp;cID='&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nx">Request&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">'cID'&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="cp">?&amp;gt;&lt;/span>
[..]
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;p>Which is a very basic reflected XSS. I spent a bit more time rooting around for an SQL injection or an auth bypass… but other jobs began to clamour for my attention. For fun, &lt;a href="https://gist.github.com/roddux/cff56d502ce2a541269fd55a4ecd8da9">here is my printf-debugging patchset&lt;/a>.&lt;/p>
&lt;p>If anyone finds another XSS with &lt;code class="highlighter-rouge">rg 'Request::(post|get|request)\('&lt;/code> then I claim all credit and I want a share of the bounty.&lt;/p>
&lt;p>Timeline:&lt;br />
Vegans offended: 26&lt;br />
Found: 12 July 2019&lt;br />
Reported on hackerone: 15 July 2019&lt;br />
Fixed: 17 July 2019&lt;br />
Bounty received: 0.00 GBP&lt;br />
Time wasted: a lot&lt;br />&lt;/p></content><author><name>Rory M</name></author><summary type="html">It’s fun working in this industry. I get paid to break things, like every day. What more could you want?</summary></entry></feed>